-- MySQL Script generated by MySQL Workbench
-- Fri Mar 28 08:18:37 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema imdb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema imdb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `imdb` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `imdb` ;

-- -----------------------------------------------------
-- Table `imdb`.`birthyear`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `imdb`.`birthyear` (
  `birthyear` INT NULL DEFAULT NULL,
  `birthyearinfo` VARCHAR(32) NULL DEFAULT NULL)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `imdb`.`genre`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `imdb`.`genre` (
  `tconst` VARCHAR(12) NOT NULL,
  `genres` VARCHAR(128) NOT NULL,
  PRIMARY KEY (`tconst`, `genres`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `imdb`.`person`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `imdb`.`person` (
  `nconst` VARCHAR(12) NULL DEFAULT NULL,
  `primaryName` VARCHAR(128) NULL DEFAULT NULL,
  `birthYear` INT NULL DEFAULT NULL,
  `deathYear` VARCHAR(4) NULL DEFAULT NULL)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `imdb`.`ta23e`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `imdb`.`ta23e` (
  `tconst` VARCHAR(12) NOT NULL,
  `directors` TEXT NULL DEFAULT NULL,
  `ordering` INT NULL DEFAULT NULL,
  `nconst` VARCHAR(12) NULL DEFAULT NULL,
  `category` VARCHAR(32) NULL DEFAULT NULL,
  `job` VARCHAR(256) NULL DEFAULT NULL,
  `characters` VARCHAR(512) NULL DEFAULT NULL)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `imdb`.`title`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `imdb`.`title` (
  `tconst` VARCHAR(12) NOT NULL,
  `titleType` VARCHAR(24) NULL DEFAULT NULL,
  `primaryTitle` VARCHAR(1024) NULL DEFAULT NULL,
  `originalTitle` VARCHAR(1024) NULL DEFAULT NULL,
  `isAdult` INT NULL DEFAULT NULL,
  `startYear` INT NULL DEFAULT NULL,
  `endYear` VARCHAR(6) NULL DEFAULT NULL,
  `runtimeMinutes` INT NULL DEFAULT NULL,
  `averageRating` DECIMAL(6,1) NULL DEFAULT NULL,
  `numVotes` INT NULL DEFAULT NULL,
  PRIMARY KEY (`tconst`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

USE `imdb` ;

-- -----------------------------------------------------
-- Placeholder table for view `imdb`.`highest_rated_3_movies_of_each_genre`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `imdb`.`highest_rated_3_movies_of_each_genre` (`id` INT);

-- -----------------------------------------------------
-- Placeholder table for view `imdb`.`highest_rated_movies_of_1983`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `imdb`.`highest_rated_movies_of_1983` (`tconst` INT, `titleType` INT, `primaryTitle` INT, `originalTitle` INT, `isAdult` INT, `startYear` INT, `endYear` INT, `runtimeMinutes` INT, `averageRating` INT, `numVotes` INT);

-- -----------------------------------------------------
-- Placeholder table for view `imdb`.`movie_staff_and_actors`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `imdb`.`movie_staff_and_actors` (`primarytitle` INT, `primaryname` INT, `job` INT);

-- -----------------------------------------------------
-- Placeholder table for view `imdb`.`top_3_movies_of_each_year_by_genre`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `imdb`.`top_3_movies_of_each_year_by_genre` (`id` INT);

-- -----------------------------------------------------
-- View `imdb`.`highest_rated_3_movies_of_each_genre`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `imdb`.`highest_rated_3_movies_of_each_genre`;
USE `imdb`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `imdb`.`highest_rated_3_movies_of_each_genre` AS with `moviesrankedbygenre` as (select `t`.`tconst` AS `tconst`,`t`.`primaryTitle` AS `primarytitle`,`t`.`averageRating` AS `averagerating`,`t`.`numVotes` AS `numvotes`,`g`.`genres` AS `genres`,row_number() OVER (PARTITION BY `g`.`genres` ORDER BY `t`.`averageRating` desc )  AS `rn` from (`imdb`.`title` `t` join `imdb`.`genre` `g` on((`t`.`tconst` = `g`.`tconst`))) where ((`t`.`titleType` = 'movie') and (`t`.`numVotes` > 10000))) select `moviesrankedbygenre`.`tconst` AS `tconst`,`moviesrankedbygenre`.`primarytitle` AS `primarytitle`,`moviesrankedbygenre`.`averagerating` AS `averagerating`,`moviesrankedbygenre`.`numvotes` AS `numvotes`,`moviesrankedbygenre`.`genres` AS `genres` from `moviesrankedbygenre` where (`moviesrankedbygenre`.`rn` <= 3);

-- -----------------------------------------------------
-- View `imdb`.`highest_rated_movies_of_1983`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `imdb`.`highest_rated_movies_of_1983`;
USE `imdb`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `imdb`.`highest_rated_movies_of_1983` AS select `imdb`.`title`.`tconst` AS `tconst`,`imdb`.`title`.`titleType` AS `titleType`,`imdb`.`title`.`primaryTitle` AS `primaryTitle`,`imdb`.`title`.`originalTitle` AS `originalTitle`,`imdb`.`title`.`isAdult` AS `isAdult`,`imdb`.`title`.`startYear` AS `startYear`,`imdb`.`title`.`endYear` AS `endYear`,`imdb`.`title`.`runtimeMinutes` AS `runtimeMinutes`,`imdb`.`title`.`averageRating` AS `averageRating`,`imdb`.`title`.`numVotes` AS `numVotes` from `imdb`.`title` where ((`imdb`.`title`.`titleType` = 'movie') and (`imdb`.`title`.`startYear` = 1983) and (`imdb`.`title`.`numVotes` > 10000)) order by `imdb`.`title`.`averageRating` desc;

-- -----------------------------------------------------
-- View `imdb`.`movie_staff_and_actors`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `imdb`.`movie_staff_and_actors`;
USE `imdb`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `imdb`.`movie_staff_and_actors` AS select `t`.`primaryTitle` AS `primarytitle`,`p`.`primaryName` AS `primaryname`,`ta`.`category` AS `job` from (((`imdb`.`title` `t` join `imdb`.`genre` `g` on((`g`.`tconst` = `t`.`tconst`))) join `imdb`.`ta23e` `ta` on((`ta`.`tconst` = `t`.`tconst`))) join `imdb`.`person` `p` on((`p`.`nconst` = `ta`.`nconst`))) where ((`t`.`titleType` = 'movie') and (`ta`.`job` <> 'archive_footage')) order by `t`.`numVotes` desc;

-- -----------------------------------------------------
-- View `imdb`.`top_3_movies_of_each_year_by_genre`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `imdb`.`top_3_movies_of_each_year_by_genre`;
USE `imdb`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `imdb`.`top_3_movies_of_each_year_by_genre` AS with `moviesrankedbyyear` as (select `t`.`tconst` AS `tconst`,`t`.`primaryTitle` AS `primarytitle`,`t`.`startYear` AS `startyear`,`t`.`averageRating` AS `averagerating`,`g`.`genres` AS `genres`,row_number() OVER (PARTITION BY `t`.`startYear` ORDER BY `t`.`averageRating` desc )  AS `rn` from (`imdb`.`title` `t` join `imdb`.`genre` `g` on((`t`.`tconst` = `g`.`tconst`))) where ((`t`.`titleType` = 'movie') and (`t`.`numVotes` > 10000))) select `moviesrankedbyyear`.`tconst` AS `tconst`,`moviesrankedbyyear`.`primarytitle` AS `primarytitle`,`moviesrankedbyyear`.`startyear` AS `startyear`,`moviesrankedbyyear`.`averagerating` AS `averagerating`,`moviesrankedbyyear`.`genres` AS `genres` from `moviesrankedbyyear` where (`moviesrankedbyyear`.`rn` <= 3);

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
